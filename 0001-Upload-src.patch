From da6e9dc2dedccf3afa15598a858d193cc27a24b7 Mon Sep 17 00:00:00 2001
From: Luca Unsigned <luca@unsigned.it>
Date: Mon, 19 Jul 2010 11:07:19 +0200
Subject: [PATCH] Upload src

---
 src/core.php  |  118 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/dati.php  |   20 ++++++++++
 src/index.php |    4 ++
 src/rules.php |   78 +++++++++++++++++++++++++++++++++++++
 4 files changed, 220 insertions(+), 0 deletions(-)
 create mode 100755 src/core.php
 create mode 100755 src/dati.php
 create mode 100755 src/index.php
 create mode 100755 src/rules.php

diff --git a/src/core.php b/src/core.php
new file mode 100755
index 0000000..18242b5
--- /dev/null
+++ b/src/core.php
@@ -0,0 +1,118 @@
+<?php
+/*
+*	There is the core's file
+* @package unsyIDS
+*	@author: Luca "Unsigned" <luca@unsigned.it>
+* @link: www.unsigned.it
+* @license: http://creativecommons.org/licenses/by-nc-sa/2.5/it/deed.it CC by-nc-sa
+*/
+function filter(){
+error_reporting(0);  
+require_once 'dati.php';
+require_once 'rules.php';
+
+//Concat all input parameter  
+$var= array_merge ($_GET, $_POST, $_COOKIE);
+array_push($var, $_SERVER['HTTP_USER_AGENT']);
+
+//if var has no element I don't need to parse...
+if (count($var) == 0) { return 0; }
+//if we have all filters I don't check what filter are on
+if (strcmp($dati['filters'], 'all') == 0){
+ foreach($var as $value){
+	 if (!is_int($value)){ //integer value can't be dangerous
+		 foreach($rules as $rule){
+			 //I'll check in rule if input can be dangerouse 
+			 if(preg_match("/{$rule['regexp']}/msi", $value)){found();}
+		 }
+	 }
+ }
+} else {
+ foreach($var as $value){
+	 if (!is_int($value)){ //integer value can't be dangerous
+		 foreach($rules as $rule){
+			 if(preg_match("/{$dati['filters']}/msi", $rule['type'])){
+				 if(preg_match("/{$rule['regexp']}/msi", $value)){
+					 if($dati['alert']==1){found();}
+				 }
+			 }
+		 }
+	 }
+ }
+}//else
+}
+
+function found(){
+include 'dati.php';
+$date = date(DATE_RFC822);
+$ip = $_SERVER['REMOTE_ADDR'];
+
+if($dati['logging']==1){
+ $file=fopen('log.txt', 'a+');
+ fwrite($file,
+	 $_SERVER ['PHP_SELF'] ." \n ".
+	 $_SERVER['REQUEST_URI']." \n".
+	 $_SERVER['HTTP_USER_AGENT']." \n".
+	 $date." \n".
+	 $ip ."\n
+	  ________________________________________\n");
+ fclose($file);
+}
+
+if($dati['alert']==1){
+ mail($dati['email_admin'],
+	 //subject
+	 'unsyIDS stopped an attack',
+	 //message
+	 'I just stopped an attack on your site
+	 If you have turned on the logging system you can read the list of attack stopped
+	 Date of attack: '.$date.'
+	 Query string: '.$_SERVER['QUERY_STRING'].'
+	 User Agent: '.$_SERVER['HTTP_USER_AGENT'].'
+	 Ip: '.$ip.' 
+	 Thanks for using this software,
+	 Have a nice day',
+	 'X-Mailer: unsyIDS \r\n
+	 Content-type: text; charset=iso-8859-1 \r\n,
+	 Content-Transfer-Encoding: 8bit\n\n');
+}
+ 
+ if ($dati['alert'] == 1){ 
+			echo '
+								 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
+								 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
+								 <html xmlns="http://www.w3.org/1999/xhtml" lang="it"> 
+								 <head> 
+								 <title>Buhahahahahaha</title> 
+								 <!-- meta tag --> 
+								 <meta http-equiv="Content-type" content="text/html; charset=utf-8" /> 
+								 <meta http-equiv="Content-Language" content="en" /> 
+								 <meta name="Keywords" content="unsigned space" /> 
+								 <meta name="Owner" content="Luca \'Unsigned\' <luca@unsigned.it>" /> 
+								 <meta name="Author" content="Luca \'Unsigned\' <luca@unsigned.it)" /> 
+								 <meta name="distribution" content="Global" />  
+								 <meta name="generator" content="Vim" /> 
+								 <meta name="cms" content="unsyIDS" /> 
+								 <meta name="Copyright" content="unsigned.it" /> 
+								 <style> 
+								 	body{
+										background-color: #000000;
+										color:#00ff00;
+										text-align:center;
+									}
+								</style> 
+				 				</head> 
+				  				<body> 
+				  				<h1>Lolz you fail</h1> 
+								<p>Attack found from '.$ip.'</p>
+								<p>Powered by unsyIDS</p>
+								</body> 
+				  				</html> ';
+			}
+		die();
+	}
+
+	function sentinel(){
+		filter();
+	}
+?>
diff --git a/src/dati.php b/src/dati.php
new file mode 100755
index 0000000..106c8b3
--- /dev/null
+++ b/src/dati.php
@@ -0,0 +1,20 @@
+<?php
+/*
+ *	There is the customisation file
+ *	Author: Luca "Unsigned" Bruzzone luca@unsigned.it
+ *  Website: www.unsigned.it
+ */
+ 
+ /*
+  * for logging and alert 1==on !1==off
+  * filter: all == all or put the name of the attack you want filter
+  * URI is the link to the IDS's folder
+  *
+  */
+$dati = array(
+		'logging' => 1,
+		'filters' => 'all',
+		'email_admin' => '',
+		'alert' => 1,
+		'URI' => ''
+		);
diff --git a/src/index.php b/src/index.php
new file mode 100755
index 0000000..e56ab82
--- /dev/null
+++ b/src/index.php
@@ -0,0 +1,4 @@
+<?php
+include_once 'core.php';
+sentinel();
+?>
\ No newline at end of file
diff --git a/src/rules.php b/src/rules.php
new file mode 100755
index 0000000..23a53f7
--- /dev/null
+++ b/src/rules.php
@@ -0,0 +1,78 @@
+<?php
+/*
+ *	There is the rule's file
+ *  @package unsyIDS
+ *	@author: Luca "Unsigned" Bruzzone <luca@unsigned.it>
+ *  @link: www.unsigned.it
+ *  @license: http://creativecommons.org/licenses/by-nc-sa/2.5/it/deed.it CC by-nc-sa
+ */
+
+$rules = array(
+		//xss filter
+		  array('type' => 'xss',
+		  'comment' => 'prevent malicious attribute injection',
+		'regexp' => "<[^>]*(script|object|iframe|applet|meta|style|form|img|onmouseover|body)*\"?[^>]*>"),
+		array('type' => 'xss',
+		  'comment' => 'prevent malicious attribute injection',
+		'regexp' => "([a-z]*)=([\`\'\"]*)script:"),
+		array('type' => 'xss',
+		  'comment' => 'prevent malicious attribute injection',
+		'regexp' => "(<[^>]+)style=([\`\'\"]*).*expression\([^>]*>"),
+		array('type' => 'xss',
+		  'comment' => 'prevent malicious attribute injection',
+		'regexp' => "(<[^>]+)style=([\`\'\"]*).*behaviour\([^>]"),
+		//SQLi
+		  array('type' => 'SQLi',
+		  		'comment' => 'prevent mysql comments, conditions and ch(a)r injections',
+		'regexp' =>'(?:"\s*(?:#|--|{))|(?:\/\*!\s?\d+)|(?:ch(?:a)?r\s*\(\s*\d)|(?:(?:(n?and|x?or|not)\s+|\|\||\&\&)\s*\w+\()'),
+		array('type' => 'SQLi',
+		'comment' => 'detect conditional SQL injection atempts',
+		'regexp' => '(?:\)\s*like\s*\()|(?:having\s*[^\s]+\s*[^\w\s])|(?:if\s?\([\d\w]\s*[=<>~])'),
+		array('type' =>'SQLi',
+		'comment' => 'detect classiical SQLi',
+		'regexp' => '(?:\\x(?:23|27|3d))|(?:^.?"$)|(?:^.*\\".+(?<!\\)")|(?:(?:^["\\]*(?:[\d"]+|[^"]+"))+\s*(?:n?and|x?or|not|\|\||\&\&)\s*[\w"[+&!@(),.-])|(?:[^\w\s]\w+\s*[|-]\s*"\s*\w)|(?:@\w+\s+(and|or)\s*["\d]+)|(?:@[\w-]+\s(and|or)\s*[^\w\s])|(?:[^\w\s:]\s*\d\W+[^\w\s]\s*".)'),
+		array('type' =>'SQLi',
+		'comment' => 'detect classical SQLi',
+		'regexp' => '(?:"\s*\*.+(?:or|id)\W*"\d)|(?:\^")|(?:^[\w\s"-]+(?<=and\s)(?<=or\s)(?<=xor\s)(?<=nand\s)(?<=not\s)(?<=\|\|)(?<=\&\&)\w+\()|(?:"[\s\d]*[^\w\s]+\W*\d\W*.*["\d])|(?:"\s*[^\w\s?]+\s*[^\w\s]+\s*")|(?:"\s*[^\w\s]+\s*[\W\d].*(?:#|--))|(?:".*\*\s*\d)|(?:"\s*or\s[\w-]+.*\d)|(?:[()*<>%+-][\w-]+[^\w\s]+"[^,])'),
+		array('type' => 'SQLi',
+				'comment' =>'detect SQLi auth bypass 1',
+				'regexp' =>'(?:\d"\s+"\s+\d)|(?:^admin\s*"|(\/\*)+"+\s?(?:--|#|\/\*|{)?)|(?:"\s*or[\w\s-]+\s*[+<>=(),-]\s*[\d"])|(?:"\s*[^\w\s]?=\s*")|(?:"\W*[+=]+\W*")|(?:"\s*[!=|][\d\s!=+-]+.*["(].*$)|(?:"\s*[!=|][\d\s!=]+.*\d+$)|(?:"\s*like\W+[\w"(])|(?:\sis\s*0\W)|(?:where\s[\s\w\.,-]+\s=)|(?:"[<>~]+")'),
+		array('type' => 'SQLi',
+		 'comment' =>'detect SQLi auth bypass 2',
+		 'regexp' => '(?:union\s*(?:all|distinct|[(!@]*)?\s*[([]*\s*select)|(?:\w+\s+like\s+\")|(?:like\s*"\%)|(?:"\s*like\W*["\d])|(?:"\s*(?:n?and|x?or|not |\|\||\&\&)\s+[\s\w]+=\s*\w+\s*having)|(?:"\s*\*\s*\w+\W+")|(?:"\s*[^?\w\s=.,;)(]+\s*[(@"]*\s*\w+\W+\w)|(?:select\s*[\[\]()\s\w\.,-]+from)'),
+		array('type' => 'SQLi',
+			'comment' =>'detect SQLi auth bypass 3',
+			'regexp' => '(?:(?:n?and|x?or|not |\|\||\&\&)\s+[\s\w+]+(?:regexp\s*\(|sounds\s+like\s*"|[=\d]+x))|("\s*\d\s*(?:--|#))|(?:"[%&<>^=]+\d\s*(=|or))|(?:"\W+[\w+-]+\s*=\s*\d\W+")|(?:"\s*is\s*\d.+"?\w)|(?:"\|?[\w-]{3,}[^\w\s.,]+")|(?:"\s*is\s*[\d.]+\s*\W.*")'),
+		array('type' => 'SQLi',
+				'comment' => 'Detects concatenated basic SQL injection and SQLLFI attempts',
+				'regexp' =>'(?:^[\W\d]+\s*(?:union|select|create|rename|truncate|load|alter|delete|update|insert|desc))|(?:(?:select|create|rename|truncate|load|alter|delete|update|insert|desc)\s+(?:concat|char|load_file)\s?\(?)|(?:end\s*\);)|("\s+regexp\W)|(?:[\s(]load_file\s*\()'),
+		array ('type' => 'SQLi',
+				'comment' => 'Detects chained SQL injection attempts',
+				'regexp'=> '(?:\/\w+;?\s+(?:having|and|or|select))|(?:\d\s+group\s+by.+\()|(?:(?:;|#|--)\s*(?:drop|alter))|(?:(?:;|#|--)\s*(?:update|insert)\s*\w{2,})|(?:[^\w]SET\s*@\w+)|(?:(?:n?and|x?or|not |\|\||\&\&)[\s(]+\w+[\s)]*[!=+]+[\s\d]*["=()])'),
+		array('type'=>'SQLi',
+				'comment' =>'Detects chained SQL injection attempts 2',
+				'regexp' =>'(?:\*\/from)|(?:\+\s*\d+\s*\+\s*@)|(?:\w"\s*(?:[-+=|@]+\s*)+[\d(])|(?:coalesce\s*\(|@@\w+\s*[^\w\s])|(?:\W!+"\w)|(?:";\s*(?:if|while|begin))|(?:"[\s\d]+=\s*\d)|(?:order\s+by\s+if\w*\s*\()|(?:[\s(]+case\d*\W.+[tw]hen[\s(])'),
+		array('type' => 'SQLi',
+				'comment' => 'Detects SQL benchmark and sleep',
+				'regexp' =>'(?:(select|;)\s+(?:benchmark|if|sleep)\s?\(\s?\(?\s?\w+)'),
+		array('type' => 'SQLi',
+				'comment' => 'Detects MySQL UDF injection and other data/structure manipulation attempts',
+				'regexp' => '(?:create\s+function\s+\w+\s+returns)|(?:;\s*(?:select|create|rename|truncate|load|alter|delete|update|insert|desc)\s*[\[(]?\w{2,})'),
+		array('type' => 'SQLi',
+				'comment' => 'Detects MySQL charset switch and MSSQL DoS attempts',
+				'regexp' => '(?:alter\s*\w+.*character\s+set\s+\w+)|(";\s*waitfor\s+time\s+")|(?:";.*:\s*goto)'),
+		array('type' => 'SQLi',
+				'comment' => 'Detects MySQL and PostgreSQL stored procedure/function injections',
+				'regexp' => '(?:procedure\s+analyse\s*\()|(?:;\s*(declare|open)\s+[\w-]+)|(?:create\s+(procedure|function)\s*\w+\s*\(\s*\)\s*-)|(?:declare[^\w]+[@#]\s*\w+)|(exec\s*\(\s*@)'),
+		//rfi
+		array ('type' => 'RFI',
+				 'comment' => 'prevent remote file inclusions',
+				 'regexp' => '^(http|https|ftp|webdav)[\s]*:[\s]*\/[\s]*\/[\s]*.*\/.*\?'),
+		//lfi
+		array ('type' => 'LFI',
+				 'comment' => 'prevent local file inclusions',
+				 'regexp' => '\.+\/+')
+		//write here custom regules
+
+	  );//end of array
+?>
-- 
1.7.1

